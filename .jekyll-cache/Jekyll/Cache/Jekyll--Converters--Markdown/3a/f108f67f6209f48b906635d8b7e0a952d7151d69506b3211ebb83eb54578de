I"·<p>Today, I found a strange behavior in UICollectionView and I wanted to share it with you.</p>

<p>I was trying to force the app I‚Äôm working on, <a href="https://itunes.apple.com/us/app/jackthreads-for-ipad/id640570922?mt=8">Jackthreads</a> to crash when I came into a weird behavior that normally leads to a crash.</p>

<p>Here‚Äôs the scenario:</p>

<ul>
  <li>You have a view controller with several collection views (or table views).</li>
  <li>You select a cell from each collection view, it can work with two.</li>
  <li>Strange things happen to your stack. The navigation controller pushes several view controlles but it can‚Äôt handle them properly, so when it comes back it gets lost or crashes the application.</li>
</ul>

<p>I‚Äôve been able to reproduce this scenario in Twitter and Foursquare app. Twitter didn‚Äôt crash, Foursquare did. It‚Äôs not a common user behavior, but it‚Äôs always nice to control these unexpected scenarios.</p>

<p>The solution is pretty simple. You just ‚Äúblock‚Äù the interaction of other cells until you‚Äôve finished interacting with the first cell. The funny thing is that the documentation is some how misleading. UICollectionViewDelegate says:</p>

<figure class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"> // Methods for notification of selection/deselection and 
 // highlight/unhighlight events.
 // The sequence of calls leading to selection from a user touch is:

 // (when the touch begins)
 // 1. -collectionView:shouldHighlightItemAtIndexPath:
 // 2. -collectionView:didHighlightItemAtIndexPath:

 // (when the touch lifts)
 // 3. -collectionView:shouldSelectItemAtIndexPath: or 
 //    -collectionView:shouldDeselectItemAtIndexPath:
 // 4. -collectionView:didSelectItemAtIndexPath: or 
 //    -collectionView:didDeselectItemAtIndexPath:
 // 5. -collectionView:didUnhighlightItemAtIndexPath:</code></pre></figure>

<p>According to this, if you just block the selection of other cells and unblock it after the selection has been made it should work:</p>

<figure class="highlight"><pre><code class="language-objective-c" data-lang="objective-c">- (BOOL)        collectionView:(UICollectionView *)collectionView 
shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
	if (!self.selectionBlocked){
        self.selectionBlocked = YES;
        return YES;
    } else {
        return NO;
    }
}
- (void)  collectionView:(UICollectionView *)collectionView 
didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    self.selectionBlocked = NO;
    ... 
}</code></pre></figure>

<p>But it didn‚Äôt solve it. In fact this solution left the other collection views irresponsive after highlighting one cell. Here‚Äôs when it started to smell strange. My next step was to log everything in the delegate and see if everything was right.</p>

<figure class="highlight"><pre><code class="language-objective-c" data-lang="objective-c">2014-03-27 01:14:34.393 MultipleCollectionViews[379:60b] -[EDSViewController 
collectionView:shouldHighlightItemAtIndexPath:]
2014-03-27 01:14:34.396 MultipleCollectionViews[379:60b] -[EDSViewController 
collectionView:didHighlightItemAtIndexPath:]
2014-03-27 01:14:34.399 MultipleCollectionViews[379:60b] -[EDSViewController 
collectionView:didUnhighlightItemAtIndexPath:]
2014-03-27 01:14:34.400 MultipleCollectionViews[379:60b] -[EDSViewController 
collectionView:shouldSelectItemAtIndexPath:]
2014-03-27 01:14:34.404 MultipleCollectionViews[379:60b] -[EDSViewController 
collectionView:didSelectItemAtIndexPath:]</code></pre></figure>

<p>What was my surprise when I saw that the order in the delegate calls claimed by Apple is wrong -collectionView:didUnhighlightItemAtIndexPath: is not being called the last one, it‚Äôs being called right before -collectionView:shouldSelectItemAtIndexPath: !!!</p>

<p>My solution was to unblock the new selection on -collectionView:didUnhighlightItemAtIndexPath: method and hold a reference to ‚Äúsomething‚Äù in case the selection is finally being made. In my case I chose to keep a reference to the collectionview where the selected cell is.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/9800975.js"> </script>

<p>You can also check the <a href="https://github.com/EdSancha/MultipleCollectionViews-Bug">example project in github</a>. 
This problem has been relatively easy to solve but when I searched around I didn‚Äôt find any mention to the different delegate order or a solution to the bug. Have you also found this problem while working with Collection Views?</p>
:ET